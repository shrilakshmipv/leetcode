# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->

# Approach
<!-- Describe your approach to solving the problem. -->

# Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->

# Code
```
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    int carry = 0;
    
    private void add(ListNode l, int s){
        if(s <= 9){
            l.val = s;
            carry = 0;
        } else {
            l.val = s % 10;
            carry = (int) s/10;
        }
    }
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode prehead = new ListNode(-1);
        ListNode res = prehead;
        while (l1 != null && l2 != null){
            int s = l1.val + l2.val + carry;
            ListNode sum = new ListNode();
            add(sum, s);
            l1 = l1.next;
            l2 = l2.next;
            res.next = sum;
            res = res.next;
        }
        
        if( l1 == null){
            while (l2 != null) {
                int s = l2.val + carry;
                ListNode sum = new ListNode();
                add(sum, s);
                res.next = sum;
                res = res.next;
                l2 = l2.next;
            }
        }
        if( l2 == null){
            while (l1 != null) {
                int s = l1.val + carry;
                ListNode sum = new ListNode();
                add(sum, s);
                res.next = sum;
                res = res.next;
                l1 = l1.next;
            }
        }
        
        if (carry != 0) res.next = new ListNode(carry);
        
        return prehead.next;
    }
}
```