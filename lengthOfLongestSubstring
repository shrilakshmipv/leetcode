# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->

# Approach
<!-- Describe your approach to solving the problem. -->

# Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->

# Code
```
import java.util.*;

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int res = 0;
        if (s.length() <= 1) return s.length();
        Hashtable<Character, Integer> table = new Hashtable<>();
        int max = 0;
        for(int i = 0; i < s.length(); i++){
            while( i < s.length()){
                if(table.containsKey(s.charAt(i))){
                    res = Math.max(res, max);
                    i = table.get(s.charAt(i))+1;
                    table.clear();
                    table.put(s.charAt(i), i);
                    max = 1;
                    break;
                }else{
                    table.put(s.charAt(i), i);
                    res = Math.max(res, ++max);
                    i++;
                }
            }
        }
        
        return res;
    }
}
```